#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "LoraTest"
  https://create.arduino.cc/cloud/things/1266bec0-da42-4a33-96a5-9526426f1510
  Arduino IoT Cloud Variables description
  The following variables are automatically generated and updated when changes are made to the Thing

  float hum;
  float temp;
  float volt;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <Adafruit_SleepyDog.h>     //Needed to initiate reboots by the SAMD WatchDog 
#include "thingProperties.h"
#include "DHT.h"
#include <Arduino_PMIC.h> // Power management for BQ25195 PMIC chip (Li-po battery)

DHT dht(3, DHT11);
const int LIPO_BATTERY_VOLTAGE_DIVIDER_TO_ANALOG_INPUT = A1;

void setup() {
  dht.begin();

  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  // it also gives the DHT11 enough time to start
  delay(10000);
  pinMode(LIPO_BATTERY_VOLTAGE_DIVIDER_TO_ANALOG_INPUT, INPUT);
  if (!PMIC.begin()) {
    Serial.println("Failed to initialize PMIC!");
  }
  PMIC.enableCharge();
  //PMIC.enableBoostMode(); // required for MKR Connector carrier ?

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection, false);  // false - do not use AIoTC watchdog - will use Adafruit SleepyDog instead

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();
}

// Timer for IoT Cloud Update
unsigned long previousMillisIOT = 0;
float intervalIOT = 1000;                      // IoT-Update interval = 1 seconds

// For the power management (Standby)
// see https://create.arduino.cc/projecthub/andreas_waldherr/mkr-wan-1310-iot-operating-at-0-92ma-879793
unsigned long JustStarted_Timer = 30000;
int sleep_cycles = 52;
boolean sleep_now = false;
int chargeStatus = 0;

void loop() {

  unsigned long currentMillisIOT = millis();
  if (currentMillisIOT - previousMillisIOT >= intervalIOT) {
    previousMillisIOT = currentMillisIOT;

   
    hum = dht.readHumidity();
    temp = dht.readTemperature();
    Serial.print("Luftfeuchtigkeit: ");
    Serial.print(hum);
    Serial.print(" %\t");
    Serial.print("Temperatur: ");
    Serial.print(temp);
    Serial.println(" Grad Celsius");
    analogReference(AR_DEFAULT);
    analogReadResolution(12);
    // use average of 3 measurements to avoid jumping values
    int battery = analogRead(LIPO_BATTERY_VOLTAGE_DIVIDER_TO_ANALOG_INPUT);
    delay(50);
    battery += analogRead(LIPO_BATTERY_VOLTAGE_DIVIDER_TO_ANALOG_INPUT);
    delay(50);
    battery += analogRead(LIPO_BATTERY_VOLTAGE_DIVIDER_TO_ANALOG_INPUT);
    Serial.print("Analog input A1: ");
    Serial.println(battery / 3.0f);
    delay(50);
    volt = 3.3f * battery / 4096.0f / 3.0f * 2.0f; // 1:1 voltage divider using two 1mohm resistors
    Serial.print("Li-po voltage: ");
    Serial.println(volt);
    
     // Send and get updates from the Arduino IoT Cloud
    ArduinoCloud.update();
    
    Serial.print("chargeStatus ");
    chargeStatus = PMIC.chargeStatus();
    switch (chargeStatus) {
      case NOT_CHARGING:
        Serial.println("NOT_CHARGING");
        break;
      case PRE_CHARGING:
        Serial.println("PRE_CHARGING");
        Serial.print("Precharging current "); Serial.println(PMIC.getPreChargeCurrent());
        break;
      case FAST_CHARGING:
        Serial.println("FAST_CHARGING");
        Serial.print("Charging current "); Serial.println(PMIC.getChargeCurrent());
        Serial.print("Charging voltage "); Serial.println(PMIC.getChargeVoltage());
        break;
      case CHARGE_TERMINATION_DONE:
        Serial.println("CHARGE_TERMINATION_DONE");
        break;
      default:
        Serial.println("UNKNOWN");
        break;
    }

  }

  // 30 seconds have passed after MKR startup
  if (millis() > JustStarted_Timer && chargeStatus != FAST_CHARGING && chargeStatus != PRE_CHARGING) {
    sleep_now = true;
    Serial.println("Will now sleep for 15 minutes");
  }

  // Go to STANDBY Mode for 52 times
  if (sleep_now == true) {
    for (int i = 0; i < sleep_cycles; i++) {
      Serial.print("Deep sleep cycle ");
      Serial.println(i + 1);
      Watchdog.sleep();                           // Enter the Standby Mode for 16,5 seconds (MKR WAN 1310 specific)
    }


    // Now restart the MKR
    int countdownMS = Watchdog.enable(100);      // WatchDog timeout in 0.1 seconds
    delay(countdownMS + 1000);                   // Wait for 1.1 second!!!
    Watchdog.disable();                          // The WatchDog WILL time out and therefore restart the CPU
  }

}


/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  if (led) {
    digitalWrite(LED_BUILTIN, HIGH);  //turn on GREEN
  } else {
    digitalWrite(LED_BUILTIN, LOW);  //turn off GREEN
  }
}





